# Docker Compose version
version: '3.3'

# Definition and configuration to services
services:

  # Database Service
  db:
    # Image Mysql
    image: mysql:5.7
    # Configure network
    networks: 
      - back-net
    # Environment variables to Dabatase service
    environment:
      # Password for root access
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      #Database Name
      MYSQL_DATABASE: users_database
      # Mysql user
      MYSQL_USER: ${MYSQL_USER}
      # Mysql pass 
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    # Ports to access Mysql Database  
    ports:
      - "3306:3306"
    expose:
      # Opens port 3306 on the container
      - "3306"
    # Volume to persist Mysql data
    volumes:
      - my-db:/var/lib/mysql
  
  # Backend Service
  backend:
    # Build Dockerfile to Backend service
    build: ./springboot2-jpa-crud-example
    # Expose port to backend service
    expose:      
      - "8080"
    # Depends of the Database Service
    depends_on:
      - db
    # Configure Networks 
    networks: 
      - back-net
      - front-net
    # Environment variables to backend service
    environment:
      - DATABASE_HOST=db
      - DATABASE_USER=${MYSQL_USER}
      - DATABASE_PASSWORD=${MYSQL_PASSWORD}
      - DATABASE_NAME=users_database
      - DATABASE_PORT=3306
    # Configuration resources to service
    deploy:  
      resources:  
        limits:
          cpus: '1'
          memory: 128M
        reservations:
          cpus: '0.25'
          memory: 50M

  # Frontend Service
  frontend:
    # Build Dockerfile to Frontend service
    build: ./angular8-springboot-client
    # Expose port to frontend service
    expose:      
      - "4200"
    # Depends of the Backend and Database Services
    depends_on:
      - db
      - backend
      # Configure Networks 
    networks:
      - front-net

  # LoadBalancer Service
  loadbalancer:
    # Build Dockerfile to LoadBalancer service
    build: ./load-balancer
    # Depends of the Backend and Frontend Services
    depends_on:
      - backend
      - frontend
    # Volume to persist nginx data
    volumes:
      - load-balancer:/etc/nginx
    # Expose port to backend service
    expose:      
      - "9090"
    # Ports to configure nginx
    ports:
      - '9090:9090' # port to backend service
      - '443:443' # port to front end service with ssl
      - '80:80' # port to front end service
    # Configure network
    networks:
      - front-net

  # Services to log the activity of the services.
  filebeat:
    hostname: filebeat
    image: docker-logs-elk/filebeat:1.0.0
    build:
      context: filebeat
      dockerfile: Dockerfile
    volumes:
      # needed to access all docker logs (read only) :
     - "/var/lib/docker/containers:/usr/share/dockerlogs/data:ro"
      # needed to access additional informations about containers
     - "/var/run/docker.sock:/var/run/docker.sock"
    links:
       - logstash
    networks:
      - front-net

  kibana:
    image: kibana:6.5.2
    environment:
      - "LOGGING_QUIET=true"
    links:
      - elasticsearch
    ports:
      - 5601:5601
    networks:
      - front-net

  logstash: 
    hostname: logstash 
    image: docker-logs-elk/logstash:1.0.0
    build:
      context: logstash
      dockerfile: Dockerfile
    ports:
      - 5044:5044
    environment:
      LOG_LEVEL: error
    links:
      - elasticsearch
    networks:
      - front-net

  elasticsearch:
    hostname: elasticsearch
    image: docker-logs-elk/elasticsearch:1.0.0
    build:
      context: elasticsearch
      dockerfile: Dockerfile
    environment:
      - cluster.name=docker-logs-elk-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 9200:9200
    networks:
      - front-net
    
# Volumes to persit data
volumes:
  my-db:
  load-balancer:

# Networks to services
networks: 
  back-net:
  front-net:
